const express = require('express');
const axios = require('axios');
const cron = require('node-cron');
const { Octokit } = require('@octokit/rest');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// ‰∏≠Èó¥‰ª∂ÈÖçÁΩÆ
app.use(cors());
app.use(express.json());

// È£û‰π¶APIÈÖçÁΩÆ
const FEISHU_APP_ID = process.env.FEISHU_APP_ID;
const FEISHU_APP_SECRET = process.env.FEISHU_APP_SECRET;
const FEISHU_APP_TOKEN = process.env.FEISHU_APP_TOKEN;
const FEISHU_TABLE_ID = process.env.FEISHU_TABLE_ID;

// GitHubÈÖçÁΩÆ
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO_OWNER = process.env.GITHUB_REPO_OWNER;
const GITHUB_REPO_NAME = process.env.GITHUB_REPO_NAME;

const octokit = new Octokit({
  auth: GITHUB_TOKEN,
});

let accessToken = null;
let tokenExpiry = 0;

// Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§Áâå
async function getFeishuAccessToken() {
  try {
    if (accessToken && Date.now() < tokenExpiry) {
      return accessToken;
    }

    console.log('üîë Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§Áâå...');
    const response = await axios.post('https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal', {
      app_id: FEISHU_APP_ID,
      app_secret: FEISHU_APP_SECRET
    });

    if (response.data.code === 0) {
      accessToken = response.data.tenant_access_token;
      tokenExpiry = Date.now() + (response.data.expire - 300) * 1000; // ÊèêÂâç5ÂàÜÈíüÂà∑Êñ∞
      console.log('‚úÖ È£û‰π¶ËÆøÈóÆ‰ª§ÁâåËé∑ÂèñÊàêÂäü');
      return accessToken;
    } else {
      throw new Error(`Ëé∑ÂèñËÆøÈóÆ‰ª§ÁâåÂ§±Ë¥•: ${response.data.msg}`);
    }
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§ÁâåÂ§±Ë¥•:', error.message);
    throw error;
  }
}

// Ëé∑Âèñ‰ªäÂ§©ÁöÑÊó•ÊúüÂ≠óÁ¨¶‰∏≤ (YYYY/MM/DD Ê†ºÂºè)
function getTodayDateString() {
  // ‰ΩøÁî®JakartaÊó∂Âå∫Ëé∑ÂèñÂΩìÂâçÊó•Êúü
  const today = new Date();
  const jakartaDate = new Date(today.toLocaleString("en-US", {timeZone: "Asia/Jakarta"}));
  const year = jakartaDate.getFullYear();
  const month = String(jakartaDate.getMonth() + 1).padStart(2, '0');
  const day = String(jakartaDate.getDate()).padStart(2, '0');
  return `${year}/${month}/${day}`;
}

// ‰ªéÈ£û‰π¶Â§öÁª¥Ë°®Ê†ºËé∑ÂèñÊï∞ÊçÆ
async function getFeishuData() {
  try {
    const token = await getFeishuAccessToken();
    const todayDate = getTodayDateString();
    
    console.log(`üìÖ Ëé∑Âèñ‰ªäÂ§©ÁöÑÈÄÅË¥ßÊï∞ÊçÆ: ${todayDate}`);
    
    // Ëé∑ÂèñÊâÄÊúâËÆ∞ÂΩï
    let allRecords = [];
    let hasMore = true;
    let pageToken = null;

    while (hasMore) {
      const url = `https://open.feishu.cn/open-apis/bitable/v1/apps/${FEISHU_APP_TOKEN}/tables/${FEISHU_TABLE_ID}/records`;
      const params = {
        page_size: 500
      };
      
      if (pageToken) {
        params.page_token = pageToken;
      }

      console.log('üîç Ê≠£Âú®Ëé∑ÂèñÈ£û‰π¶Êï∞ÊçÆ...');
      const response = await axios.get(url, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        params
      });

      if (response.data.code === 0) {
        const records = response.data.data.items || [];
        allRecords = allRecords.concat(records);
        
        hasMore = response.data.data.has_more;
        pageToken = response.data.data.page_token;
        
        console.log(`üì¶ Â∑≤Ëé∑Âèñ ${records.length} Êù°ËÆ∞ÂΩï`);
      } else {
        throw new Error(`Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•: ${response.data.msg}`);
      }
    }

    console.log(`üìä ÊÄªÂÖ±Ëé∑Âèñ ${allRecords.length} Êù°ËÆ∞ÂΩï`);

    // ËøáÊª§‰ªäÂ§©ÁöÑÊï∞ÊçÆÂπ∂ËΩ¨Êç¢Ê†ºÂºè
    const todayRecords = allRecords.filter(record => {
      const tanggalKirim = record.fields['Tanggal Kirim EsKrim'];
      if (!tanggalKirim) {
        console.log(`‚ö†Ô∏è ËÆ∞ÂΩïÁº∫Â∞ëÂèëÈÄÅÊó•ÊúüÂ≠óÊÆµ: ${record.fields['Outlet Code'] || 'Unknown'}`);
        return false;
      }
      
      // Â§ÑÁêÜÊó•ÊúüÊ†ºÂºèÔºåÂèØËÉΩÊòØÊó∂Èó¥Êà≥ÊàñÊó•ÊúüÂ≠óÁ¨¶‰∏≤
      let recordDate;
      if (typeof tanggalKirim === 'number') {
        recordDate = new Date(tanggalKirim);
        // ËΩ¨Êç¢‰∏∫JakartaÊó∂Âå∫ÁöÑÊó•Êúü
        const jakartaDateString = recordDate.toLocaleDateString("en-CA", {timeZone: "Asia/Jakarta"});
        console.log(`üìÖ Êó∂Èó¥Êà≥Ê†ºÂºè: ${tanggalKirim} -> JakartaÊó∂Âå∫: ${jakartaDateString}`);
        recordDate = new Date(jakartaDateString);
      } else if (typeof tanggalKirim === 'string') {
        recordDate = new Date(tanggalKirim);
        console.log(`üìÖ Â≠óÁ¨¶‰∏≤Ê†ºÂºè: ${tanggalKirim} -> ${recordDate.toLocaleDateString()}`);
      } else {
        console.log(`‚ùå Êú™Áü•Êó•ÊúüÊ†ºÂºè: ${typeof tanggalKirim} - ${tanggalKirim}`);
        return false;
      }
      
      // Ê£ÄÊü•Êó•ÊúüÊòØÂê¶ÊúâÊïà
      if (isNaN(recordDate.getTime())) {
        console.log(`‚ùå Êó†ÊïàÊó•Êúü: ${tanggalKirim}`);
        return false;
      }
      
      const recordDateString = `${recordDate.getFullYear()}/${String(recordDate.getMonth() + 1).padStart(2, '0')}/${String(recordDate.getDate()).padStart(2, '0')}`;
      const isToday = recordDateString === todayDate;
      
      console.log(`üîç Êó•ÊúüÊØîËæÉ: ËÆ∞ÂΩïÊó•Êúü=${recordDateString}, ‰ªäÂ§©=${todayDate}, ÂåπÈÖç=${isToday}`);
      
      if (isToday) {
        // Ë∞ÉËØïËæìÂá∫ÔºöÊòæÁ§∫ËÆ∞ÂΩïÁöÑÊâÄÊúâÂ≠óÊÆµÂêçÁß∞
        console.log(`üîç ‰ªäÂ§©ÁöÑËÆ∞ÂΩïÂ≠óÊÆµ: ${record.fields['Outlet Code']} - Â≠óÊÆµÂàóË°®: ${Object.keys(record.fields).join(', ')}`);
        console.log(`üìç ÁªèÁ∫¨Â∫¶Â≠óÊÆµÂÄº: latitude=${record.fields['latitude']}, longitude=${record.fields['longitude']}`);
      }
      
      return isToday;
    });

    console.log(`üéØ Á≠õÈÄâÂá∫‰ªäÂ§©ÁöÑËÆ∞ÂΩï: ${todayRecords.length} Êù°`);

    // ËΩ¨Êç¢‰∏∫CSVÊ†ºÂºèÁöÑÊï∞ÊçÆ
    const csvData = todayRecords.map(record => {
      const fields = record.fields;
      
      // Á°Æ‰øùÁªèÁ∫¨Â∫¶ÊòØÊï∞Â≠ó
      const latitude = parseFloat(fields['latitude']) || 0;
      const longitude = parseFloat(fields['longitude']) || 0;
      
      // Â¶ÇÊûúÁªèÁ∫¨Â∫¶Êó†ÊïàÔºåË∑≥ËøáÊ≠§ËÆ∞ÂΩï
      if (latitude === 0 || longitude === 0) {
        console.log(`‚ö†Ô∏è Ë∑≥ËøáÊó†ÊïàÂùêÊ†áÁöÑËÆ∞ÂΩï: ${fields['Outlet Code']}`);
        return null;
      }

      return {
        shop_code: fields['Outlet Code'] || '',
        latitude: latitude,
        longitude: longitude,
        outlet_name: fields['Nama Pemilik'] || '',
        phoneNumber: fields['No Telepon Pemilik'] || '',
        kantong: fields['Kantong'] || '',
        orderType: fields['Order Type'] || '',
        totalDUS: fields['Total DUS'] || '',
        finalPrice: fields['Final Price IDR'] || ''
      };
    }).filter(record => record !== null); // ËøáÊª§ÊéâÊó†ÊïàËÆ∞ÂΩï

    console.log(`‚úÖ ÊúâÊïàÁöÑÈÄÅË¥ßÂú∞ÁÇπ: ${csvData.length} ‰∏™`);
    return csvData;

  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÈ£û‰π¶Êï∞ÊçÆÂ§±Ë¥•:', error.message);
    
    // ËæìÂá∫ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
    if (error.response) {
      console.error('üìÑ ÈîôËØØÁä∂ÊÄÅÁ†Å:', error.response.status);
      console.error('üìÑ ÈîôËØØÂìçÂ∫îÂ§¥:', JSON.stringify(error.response.headers, null, 2));
      console.error('üìÑ ÈîôËØØÂìçÂ∫îÊï∞ÊçÆ:', JSON.stringify(error.response.data, null, 2));
    } else if (error.request) {
      console.error('üìÑ ËØ∑Ê±ÇÈîôËØØ:', error.request);
    } else {
      console.error('üìÑ ÂÖ∂‰ªñÈîôËØØ:', error.message);
    }
    
    throw error;
  }
}

// ÁîüÊàêCSVÂÜÖÂÆπ
function generateCSV(data) {
  const headers = 'shop_code,latitude,longitude,outlet_name,phoneNumber,kantong,orderType,totalDUS,finalPrice';
  const rows = data.map(item => 
    `${item.shop_code},${item.latitude},${item.longitude},"${item.outlet_name}","${item.phoneNumber}","${item.kantong}","${item.orderType}","${item.totalDUS}","${item.finalPrice}"`
  );
  return [headers, ...rows].join('\n');
}

// Êõ¥Êñ∞GitHub‰ªìÂ∫ì‰∏≠ÁöÑCSVÊñá‰ª∂
async function updateGitHubCSV(csvContent) {
  try {
    console.log('üì§ Êõ¥Êñ∞GitHub‰ªìÂ∫ì‰∏≠ÁöÑCSVÊñá‰ª∂...');
    
    // Ëé∑ÂèñÂΩìÂâçÊñá‰ª∂ÂÜÖÂÆπ‰ª•Ëé∑ÂèñSHA
    let sha = null;
    try {
      const { data: currentFile } = await octokit.rest.repos.getContent({
        owner: GITHUB_REPO_OWNER,
        repo: GITHUB_REPO_NAME,
        path: 'public/markers.csv',
      });
      sha = currentFile.sha;
    } catch (error) {
      // Â¶ÇÊûúÊñá‰ª∂‰∏çÂ≠òÂú®Ôºåsha‰øùÊåÅ‰∏∫null
      console.log('üìù Êñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂ∞ÜÂàõÂª∫Êñ∞Êñá‰ª∂');
    }

    const today = getTodayDateString();
    const message = `üöö Êõ¥Êñ∞ÈÄÅË¥ßÊï∞ÊçÆ - ${today}`;

    // Êõ¥Êñ∞ÊàñÂàõÂª∫Êñá‰ª∂
    await octokit.rest.repos.createOrUpdateFileContents({
      owner: GITHUB_REPO_OWNER,
      repo: GITHUB_REPO_NAME,
      path: 'public/markers.csv',
      message: message,
      content: Buffer.from(csvContent).toString('base64'),
      sha: sha, // Â¶ÇÊûúÊñá‰ª∂Â≠òÂú®ÂàôÊèê‰æõSHAÔºå‰∏çÂ≠òÂú®Âàô‰∏∫null
    });

    console.log('‚úÖ GitHub CSVÊñá‰ª∂Êõ¥Êñ∞ÊàêÂäü');
  } catch (error) {
    console.error('‚ùå Êõ¥Êñ∞GitHub CSVÊñá‰ª∂Â§±Ë¥•:', error.message);
    throw error;
  }
}

// ÊâßË°åÂêåÊ≠•‰ªªÂä°
async function syncData() {
  try {
    console.log('\nüöÄ ÂºÄÂßãÊâßË°åÈ£û‰π¶Êï∞ÊçÆÂêåÊ≠•‰ªªÂä°...');
    console.log(`‚è∞ ÂêåÊ≠•Êó∂Èó¥: ${new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Jakarta' })}`);
    
    // Ëé∑ÂèñÈ£û‰π¶Êï∞ÊçÆ
    const data = await getFeishuData();
    
    if (data.length === 0) {
      console.log('üìù ‰ªäÂ§©Ê≤°ÊúâÈÄÅË¥ßÊï∞ÊçÆÔºåÊ∏ÖÁ©∫Âú∞ÂõæÊ†áËÆ∞');
      const emptyCSV = 'shop_code,latitude,longitude,outlet_name,phoneNumber,kantong,orderType,totalDUS,finalPrice';
      await updateGitHubCSV(emptyCSV);
    } else {
      // ÁîüÊàêCSV
      const csvContent = generateCSV(data);
      
      // Êõ¥Êñ∞GitHub
      await updateGitHubCSV(csvContent);
    }
    
    console.log('üéâ Êï∞ÊçÆÂêåÊ≠•ÂÆåÊàêÔºÅ');
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Êï∞ÊçÆÂêåÊ≠•Â§±Ë¥•:', error.message);
    console.log('=' .repeat(60));
  }
}

// ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    timezone: 'Asia/Jakarta'
  });
});

// ÊâãÂä®ÂêåÊ≠•Á´ØÁÇπ
app.post('/sync', async (req, res) => {
  try {
    await syncData();
    res.json({ success: true, message: 'Êï∞ÊçÆÂêåÊ≠•ÂÆåÊàê' });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Ë∞ÉËØïÂ≠óÊÆµÁªìÊûÑÁ´ØÁÇπ
app.post('/debug-fields', async (req, res) => {
  try {
    const token = await getFeishuAccessToken();
    const todayDate = getTodayDateString();
    
    console.log(`üìÖ Ë∞ÉËØï‰ªäÂ§©ÁöÑÂ≠óÊÆµÁªìÊûÑ: ${todayDate}`);
    
    // Ëé∑ÂèñÂâç10Êù°ËÆ∞ÂΩï
    const url = `https://open.feishu.cn/open-apis/bitable/v1/apps/${FEISHU_APP_TOKEN}/tables/${FEISHU_TABLE_ID}/records`;
    const response = await axios.get(url, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      params: { page_size: 100 }
    });

    if (response.data.code === 0) {
      const records = response.data.data.items || [];
      
      // ËøáÊª§‰ªäÂ§©ÁöÑËÆ∞ÂΩï
      const todayRecords = records.filter(record => {
        const tanggalKirim = record.fields['Tanggal Kirim EsKrim'];
        if (!tanggalKirim) return false;
        
        let recordDate = new Date(tanggalKirim);
        if (typeof tanggalKirim === 'number') {
          const jakartaDateString = recordDate.toLocaleDateString("en-CA", {timeZone: "Asia/Jakarta"});
          recordDate = new Date(jakartaDateString);
        }
        
        const recordDateString = `${recordDate.getFullYear()}/${String(recordDate.getMonth() + 1).padStart(2, '0')}/${String(recordDate.getDate()).padStart(2, '0')}`;
        return recordDateString === todayDate;
      });

      console.log(`ÊâæÂà∞ ${todayRecords.length} Êù°‰ªäÂ§©ÁöÑËÆ∞ÂΩï`);
      
      // ÊòæÁ§∫Â≠óÊÆµÁªìÊûÑ
      const fieldInfo = todayRecords.map((record, index) => {
        const fields = record.fields;
        return {
          recordIndex: index + 1,
          outletCode: fields['Outlet Code'],
          allFieldNames: Object.keys(fields),
          latitudeField: {
            value: fields['latitude'],
            type: typeof fields['latitude']
          },
          longitudeField: {
            value: fields['longitude'], 
            type: typeof fields['longitude']
          },
          // Ê£ÄÊü•ÂèØËÉΩÁöÑÂÖ∂‰ªñÂùêÊ†áÂ≠óÊÆµÂêç
          possibleLatFields: Object.keys(fields).filter(key => 
            key.toLowerCase().includes('lat') || 
            key.toLowerCase().includes('Á∫¨Â∫¶')
          ),
          possibleLngFields: Object.keys(fields).filter(key => 
            key.toLowerCase().includes('lng') || 
            key.toLowerCase().includes('long') ||
            key.toLowerCase().includes('ÁªèÂ∫¶')
          )
        };
      });
      
      res.json({
        success: true,
        todayDate: todayDate,
        recordCount: todayRecords.length,
        fieldInfo: fieldInfo
      });
    } else {
      throw new Error(`Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•: ${response.data.msg}`);
    }
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
});

// Ë∞ÉËØïÂêåÊ≠•Á´ØÁÇπ - ËøîÂõûËØ¶ÁªÜÁöÑÊâßË°åËøáÁ®ã
app.post('/debug-sync', async (req, res) => {
  const logs = [];
  const originalLog = console.log;
  const originalError = console.error;
  
  // ÊçïËé∑ÊâÄÊúâÊó•ÂøóËæìÂá∫
  console.log = (...args) => {
    const message = args.join(' ');
    logs.push({ type: 'info', message, timestamp: new Date().toISOString() });
    originalLog(...args);
  };
  
  console.error = (...args) => {
    const message = args.join(' ');
    logs.push({ type: 'error', message, timestamp: new Date().toISOString() });
    originalError(...args);
  };
  
  try {
    // Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
    logs.push({ 
      type: 'info', 
      message: `ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•: FEISHU_APP_ID=${FEISHU_APP_ID ? 'Â∑≤ËÆæÁΩÆ' : 'Êú™ËÆæÁΩÆ'}`, 
      timestamp: new Date().toISOString() 
    });
    logs.push({ 
      type: 'info', 
      message: `ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•: FEISHU_APP_SECRET=${FEISHU_APP_SECRET ? 'Â∑≤ËÆæÁΩÆ' : 'Êú™ËÆæÁΩÆ'}`, 
      timestamp: new Date().toISOString() 
    });
    logs.push({ 
      type: 'info', 
      message: `ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•: FEISHU_APP_TOKEN=${FEISHU_APP_TOKEN ? 'Â∑≤ËÆæÁΩÆ' : 'Êú™ËÆæÁΩÆ'}`, 
      timestamp: new Date().toISOString() 
    });
    logs.push({ 
      type: 'info', 
      message: `ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•: FEISHU_TABLE_ID=${FEISHU_TABLE_ID ? 'Â∑≤ËÆæÁΩÆ' : 'Êú™ËÆæÁΩÆ'}`, 
      timestamp: new Date().toISOString() 
    });
    logs.push({ 
      type: 'info', 
      message: `ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•: GITHUB_TOKEN=${GITHUB_TOKEN ? 'Â∑≤ËÆæÁΩÆ' : 'Êú™ËÆæÁΩÆ'}`, 
      timestamp: new Date().toISOString() 
    });
    
    await syncData();
    
    // ÊÅ¢Â§çÂéüÂßãÁöÑÊó•ÂøóÂáΩÊï∞
    console.log = originalLog;
    console.error = originalError;
    
    res.json({ 
      success: true, 
      message: 'Ë∞ÉËØïÂêåÊ≠•ÂÆåÊàê',
      logs: logs
    });
  } catch (error) {
    // ÊÅ¢Â§çÂéüÂßãÁöÑÊó•ÂøóÂáΩÊï∞
    console.log = originalLog;
    console.error = originalError;
    
    logs.push({ 
      type: 'error', 
      message: `ÂêåÊ≠•Â§±Ë¥•: ${error.message}`, 
      timestamp: new Date().toISOString() 
    });
    
    res.status(500).json({ 
      success: false, 
      error: error.message,
      logs: logs
    });
  }
});

// ÊúçÂä°‰ø°ÊÅØÁ´ØÁÇπ
app.get('/', (req, res) => {
  const now = new Date();
  const jakartaTime = now.toLocaleString('zh-CN', { timeZone: 'Asia/Jakarta' });
  
  res.json({
    service: 'Âç∞Â∞ºÈÄÅË¥ßÊï∞ÊçÆÂêåÊ≠•ÊúçÂä°',
    status: 'running',
    currentTime: jakartaTime,
    timezone: 'Asia/Jakarta (UTC+7)',
    schedule: 'ÊØèÊó• 09:00 Âíå 14:00 Ëá™Âä®ÂêåÊ≠•',
    lastSync: 'Êü•ÁúãÊó•Âøó‰∫ÜËß£ËØ¶ÊÉÖ',
    endpoints: {
      health: '/health',
      manualSync: 'POST /sync'
    }
  });
});

// ËÆæÁΩÆÂÆöÊó∂‰ªªÂä° - ÊØèÊó•09:00Âíå14:00 (JakartaÊó∂Èó¥)
cron.schedule('0 9 * * *', syncData, {
  timezone: 'Asia/Jakarta'
});

cron.schedule('0 14 * * *', syncData, {
  timezone: 'Asia/Jakarta'
});

console.log('üåü Âç∞Â∞ºÈÄÅË¥ßÊï∞ÊçÆÂêåÊ≠•ÊúçÂä°ÂêØÂä®‰∏≠...');
console.log('üìÖ ÂÆöÊó∂ÂêåÊ≠•: ÊØèÊó• 09:00 Âíå 14:00 (JakartaÊó∂Èó¥)');
console.log('üîó ÊâãÂä®ÂêåÊ≠•: POST /sync');
console.log('‚ù§Ô∏è ÂÅ•Â∫∑Ê£ÄÊü•: GET /health');

app.listen(PORT, () => {
  console.log(`üöÄ ÊúçÂä°ËøêË°åÂú®Á´ØÂè£ ${PORT}`);
  console.log(`üåç ÊúçÂä°Âú∞ÂùÄ: https://feishu-delivery-sync.onrender.com`);
  console.log('/' .repeat(60));
}); 

// ÁâàÊú¨Êõ¥Êñ∞: Ê∑ªÂä†ÊâãÂä®Âà∑Êñ∞APIÊîØÊåÅ - v1.1.0 